/*
 * Gpmc_8148.h
 *
 *  Created on: Jul 21, 2011
 *      Author: sailesh.myneni
 */

#ifndef GPMC_8148_H_
#define GPMC_8148_H_

#include "C_Types.h"

#define GPMCCONTROLLER_BASE      0x50000000 /*Base address of GPMC register memory*/
#define GPMCMEMORY_BASE          0x04000000 //0x02000000//0x02000000 /*Base address of GPMC 512 MB memory*/

#define BLOCK0                   0x0000000
#define PAGESIZE                 1024
#define BLOCKSIZE                64*1024

/*GPIO, PIN MUX and PRCM base address defined*/
#define GPIO_BANK0_BASE_ADDR			0x48032000
#define GPIO_BANK1_BASE_ADDR			0x4804C000

#define pMLB_SIG_IO_CTRL		(unsigned int *)0x48140E18
#define pMLB_DAT_IO_CTRL		(unsigned int *)0x48140E1C

#define PRCM_BASE_ADDR			0x48180000
#define pCM_ALWON_GPMC_CLKCTRL		(volatile unsigned int *)(PRCM_BASE_ADDR + 0x15D0)
#define pCM_ALWON_GPIO_1_CLKCTRL	(volatile unsigned int *)(PRCM_BASE_ADDR + 0x1560)

#define CTRL_MODULE_BASE_ADDR	0x48140000

#define	PINCNTL1	(	CTRL_MODULE_BASE_ADDR +	0x0800	)
#define	PINCNTL2	(	CTRL_MODULE_BASE_ADDR +	0x0804	)
#define	PINCNTL3	(	CTRL_MODULE_BASE_ADDR +	0x0808	)
#define	PINCNTL4	(	CTRL_MODULE_BASE_ADDR +	0x080C	)
#define	PINCNTL5	(	CTRL_MODULE_BASE_ADDR +	0x0810	)
#define	PINCNTL6	(	CTRL_MODULE_BASE_ADDR +	0x0814	)
#define	PINCNTL7	(	CTRL_MODULE_BASE_ADDR +	0x0818	)
#define	PINCNTL8	(	CTRL_MODULE_BASE_ADDR +	0x081C	)
#define	PINCNTL9	(	CTRL_MODULE_BASE_ADDR +	0x0820	)
#define	PINCNTL10	(	CTRL_MODULE_BASE_ADDR +	0x0824	)
#define	PINCNTL11	(	CTRL_MODULE_BASE_ADDR +	0x0828	)
#define	PINCNTL12	(	CTRL_MODULE_BASE_ADDR +	0x082C	)
#define	PINCNTL13	(	CTRL_MODULE_BASE_ADDR +	0x0830	)
#define	PINCNTL14	(	CTRL_MODULE_BASE_ADDR +	0x0834	)
#define	PINCNTL15	(	CTRL_MODULE_BASE_ADDR +	0x0838	)
#define	PINCNTL16	(	CTRL_MODULE_BASE_ADDR +	0x083C	)
#define	PINCNTL17	(	CTRL_MODULE_BASE_ADDR +	0x0840	)
#define	PINCNTL18	(	CTRL_MODULE_BASE_ADDR +	0x0844	)
#define	PINCNTL19	(	CTRL_MODULE_BASE_ADDR +	0x0848	)
#define	PINCNTL20	(	CTRL_MODULE_BASE_ADDR +	0x084C	)
#define	PINCNTL21	(	CTRL_MODULE_BASE_ADDR +	0x0850	)
#define	PINCNTL22	(	CTRL_MODULE_BASE_ADDR +	0x0854	)
#define	PINCNTL23	(	CTRL_MODULE_BASE_ADDR +	0x0858	)
#define	PINCNTL24	(	CTRL_MODULE_BASE_ADDR +	0x085C	)
#define	PINCNTL25	(	CTRL_MODULE_BASE_ADDR +	0x0860	)
#define	PINCNTL26	(	CTRL_MODULE_BASE_ADDR +	0x0864	)
#define	PINCNTL27	(	CTRL_MODULE_BASE_ADDR +	0x0868	)
#define	PINCNTL28	(	CTRL_MODULE_BASE_ADDR +	0x086C	)
#define	PINCNTL29	(	CTRL_MODULE_BASE_ADDR +	0x0870	)
#define	PINCNTL30	(	CTRL_MODULE_BASE_ADDR +	0x0874	)
#define	PINCNTL31	(	CTRL_MODULE_BASE_ADDR +	0x0878	)
#define	PINCNTL32	(	CTRL_MODULE_BASE_ADDR +	0x087C	)
#define	PINCNTL33	(	CTRL_MODULE_BASE_ADDR +	0x0880	)
#define	PINCNTL34	(	CTRL_MODULE_BASE_ADDR +	0x0884	)
#define	PINCNTL35	(	CTRL_MODULE_BASE_ADDR +	0x0888	)
#define	PINCNTL36	(	CTRL_MODULE_BASE_ADDR +	0x088C	)
#define	PINCNTL37	(	CTRL_MODULE_BASE_ADDR +	0x0890	)
#define	PINCNTL38	(	CTRL_MODULE_BASE_ADDR +	0x0894	)
#define	PINCNTL39	(	CTRL_MODULE_BASE_ADDR +	0x0898	)
#define	PINCNTL40	(	CTRL_MODULE_BASE_ADDR +	0x089C	)
#define	PINCNTL41	(	CTRL_MODULE_BASE_ADDR +	0x08A0	)
#define	PINCNTL42	(	CTRL_MODULE_BASE_ADDR +	0x08A4	)
#define	PINCNTL43	(	CTRL_MODULE_BASE_ADDR +	0x08A8	)
#define	PINCNTL44	(	CTRL_MODULE_BASE_ADDR +	0x08AC	)
#define	PINCNTL45	(	CTRL_MODULE_BASE_ADDR +	0x08B0	)
#define	PINCNTL46	(	CTRL_MODULE_BASE_ADDR +	0x08B4	)
#define	PINCNTL47	(	CTRL_MODULE_BASE_ADDR +	0x08B8	)
#define	PINCNTL48	(	CTRL_MODULE_BASE_ADDR +	0x08BC	)
#define	PINCNTL49	(	CTRL_MODULE_BASE_ADDR +	0x08C0	)
#define	PINCNTL50	(	CTRL_MODULE_BASE_ADDR +	0x08C4	)
#define	PINCNTL51	(	CTRL_MODULE_BASE_ADDR +	0x08C8	)
#define	PINCNTL52	(	CTRL_MODULE_BASE_ADDR +	0x08CC	)
#define	PINCNTL53	(	CTRL_MODULE_BASE_ADDR +	0x08D0	)
#define	PINCNTL54	(	CTRL_MODULE_BASE_ADDR +	0x08D4	)
#define	PINCNTL55	(	CTRL_MODULE_BASE_ADDR +	0x08D8	)
#define	PINCNTL56	(	CTRL_MODULE_BASE_ADDR +	0x08DC	)
#define	PINCNTL57	(	CTRL_MODULE_BASE_ADDR +	0x08E0	)
#define	PINCNTL58	(	CTRL_MODULE_BASE_ADDR +	0x08E4	)
#define	PINCNTL59	(	CTRL_MODULE_BASE_ADDR +	0x08E8	)
#define	PINCNTL60	(	CTRL_MODULE_BASE_ADDR +	0x08EC	)
#define	PINCNTL61	(	CTRL_MODULE_BASE_ADDR +	0x08F0	)
#define	PINCNTL62	(	CTRL_MODULE_BASE_ADDR +	0x08F4	)
#define	PINCNTL63	(	CTRL_MODULE_BASE_ADDR +	0x08F8	)
#define	PINCNTL64	(	CTRL_MODULE_BASE_ADDR +	0x08FC	)
#define	PINCNTL65	(	CTRL_MODULE_BASE_ADDR +	0x0900	)
#define	PINCNTL66	(	CTRL_MODULE_BASE_ADDR +	0x0904	)
#define	PINCNTL67	(	CTRL_MODULE_BASE_ADDR +	0x0908	)

#define PINCNTL68	(CTRL_MODULE_BASE_ADDR + 0x090C)
#define PINCNTL69	(CTRL_MODULE_BASE_ADDR + 0x0910)
#define PINCNTL72	(CTRL_MODULE_BASE_ADDR + 0x091C)
#define PINCNTL73	(CTRL_MODULE_BASE_ADDR + 0x0920)
#define PINCNTL59	(CTRL_MODULE_BASE_ADDR + 0x08e8)
#define PINCNTL60	(CTRL_MODULE_BASE_ADDR + 0x08ec)
#define PINCNTL89	(CTRL_MODULE_BASE_ADDR + 0x0960)
#define PINCNTL90	(CTRL_MODULE_BASE_ADDR + 0x0964)
#define PINCNTL91	(CTRL_MODULE_BASE_ADDR + 0x0968)
#define PINCNTL92	(CTRL_MODULE_BASE_ADDR + 0x096C)
#define PINCNTL93	(CTRL_MODULE_BASE_ADDR + 0x0970)
#define PINCNTL94	(CTRL_MODULE_BASE_ADDR + 0x0974)
#define PINCNTL95	(CTRL_MODULE_BASE_ADDR + 0x0978)
#define PINCNTL96	(CTRL_MODULE_BASE_ADDR + 0x097C)
#define PINCNTL97	(CTRL_MODULE_BASE_ADDR + 0x0980)
#define PINCNTL98	(CTRL_MODULE_BASE_ADDR + 0x0984)
#define PINCNTL99	(CTRL_MODULE_BASE_ADDR + 0x0988)
#define PINCNTL100	(CTRL_MODULE_BASE_ADDR + 0x098C)
#define PINCNTL101	(CTRL_MODULE_BASE_ADDR + 0x0990)
#define PINCNTL102	(CTRL_MODULE_BASE_ADDR + 0x0994)
#define PINCNTL103	(CTRL_MODULE_BASE_ADDR + 0x0998)
#define PINCNTL104	(CTRL_MODULE_BASE_ADDR + 0x099C)

#define PINCNTL105	(CTRL_MODULE_BASE_ADDR + 0x09A0)
#define PINCNTL106	(CTRL_MODULE_BASE_ADDR + 0x09A4)
#define PINCNTL107	(CTRL_MODULE_BASE_ADDR + 0x09A8)
#define PINCNTL108	(CTRL_MODULE_BASE_ADDR + 0x09AC)
#define PINCNTL109	(CTRL_MODULE_BASE_ADDR + 0x09B0)
#define PINCNTL110	(CTRL_MODULE_BASE_ADDR + 0x09B4)
#define PINCNTL111	(CTRL_MODULE_BASE_ADDR + 0x09B8)
#define PINCNTL112	(CTRL_MODULE_BASE_ADDR + 0x09BC)
#define PINCNTL122	(CTRL_MODULE_BASE_ADDR + 0x09E4)
#define PINCNTL123	(CTRL_MODULE_BASE_ADDR + 0x09E8)
#define PINCNTL124	(CTRL_MODULE_BASE_ADDR + 0x09EC)
#define PINCNTL125	(CTRL_MODULE_BASE_ADDR + 0x09F0)
#define PINCNTL126	(CTRL_MODULE_BASE_ADDR + 0x09F4)
#define PINCNTL127	(CTRL_MODULE_BASE_ADDR + 0x09F8)
#define PINCNTL128	(CTRL_MODULE_BASE_ADDR + 0x09FC)
#define PINCNTL129	(CTRL_MODULE_BASE_ADDR + 0x0A00)
#define	PINCNTL130	(CTRL_MODULE_BASE_ADDR + 0x0A04)
#define	PINCNTL131	(CTRL_MODULE_BASE_ADDR + 0x0A08)
#define	PINCNTL132	(CTRL_MODULE_BASE_ADDR + 0x0A0C)
#define	PINCNTL133	(CTRL_MODULE_BASE_ADDR + 0x0A10)
#define PINCNTL235	(CTRL_MODULE_BASE_ADDR + 0x0BA8)
#define PINCNTL243	(CTRL_MODULE_BASE_ADDR + 0x0BC8)
#define PINCNTL244	(CTRL_MODULE_BASE_ADDR + 0x0BCC)
#define PINCNTL245	(CTRL_MODULE_BASE_ADDR + 0x0BD0)
#define PINCNTL246	(CTRL_MODULE_BASE_ADDR + 0x0BD4)
#define PINCNTL247	(CTRL_MODULE_BASE_ADDR + 0x0BD8)
#define PINCNTL248	(CTRL_MODULE_BASE_ADDR + 0x0BDC)
#define PINCNTL249	(CTRL_MODULE_BASE_ADDR + 0x0BE0)
#define PINCNTL250	(CTRL_MODULE_BASE_ADDR + 0x0BE4)
#define PINCNTL251	(CTRL_MODULE_BASE_ADDR + 0x0BE8)
#define PINCNTL252	(CTRL_MODULE_BASE_ADDR + 0x0BEC)
#define PINCNTL253	(CTRL_MODULE_BASE_ADDR + 0x0BF0)
#define PINCNTL254	(CTRL_MODULE_BASE_ADDR + 0x0BF4)
#define PINCNTL255	(CTRL_MODULE_BASE_ADDR + 0x0BF8)
#define PINCNTL256	(CTRL_MODULE_BASE_ADDR + 0x0BFC)
#define PINCNTL257	(CTRL_MODULE_BASE_ADDR + 0x0C00)
#define PINCNTL258	(CTRL_MODULE_BASE_ADDR + 0x0C04)
 


/**************************************************************************\
* Register Overlay Structure
\**************************************************************************/

typedef struct {

	VUNS32 GPMC_REVISION;
	VUNS8  RSVD0[12];
	VUNS32 GPMC_SYSCONFIG;
	VUNS32 GPMC_SYSSTATUS;
	VUNS32 GPMC_IRQSTATUS;
	VUNS32 GPMC_IRQENABLE;
	VUNS8  RSVD1[32];
	VUNS32 GPMC_TIMEOUT_CONTROL;
	VUNS32 GPMC_ERR_ADDRESS;
	VUNS32 GPMC_ERR_TYPE;
	VUNS8  RSVD2[4];
	VUNS32 GPMC_CONFIG;
	VUNS32 GPMC_STATUS;
	VUNS8  RSVD3[8];
	VUNS32 GPMC_CONFIG_i[8][12];
	//VUNS8  RSVD4[8];
	VUNS32 GPMC_PREFETCH_CONFIG1;
	VUNS32 GPMC_PREFETCH_CONFIG2;
	VUNS8  RSVD4[4];
	VUNS32 GPMC_PREFETCH_CONTROL;
	VUNS32 GPMC_PREFETCH_STATUS;
	VUNS32 GPMC_ECC_CONFIG;
	VUNS32 GPMC_ECC_CONTROL;
	VUNS32 GPMC_ECC_SIZE_CONFIG;
	VUNS32 GPMC_ECCj_RESULT[9];
	VUNS8  RSVD5[28];
	VUNS32 GPMC_BCH_RESULT_i[8][4];
	VUNS8  RSVD6[16];
	VUNS32 GPMC_BCH_SWDATA;
	VUNS8  RSVD7[44];
	VUNS32 GPMC_BCH_RESULT_j[8][4];

} stGpmc_Regs;


/**************************************************************************\
* Overlay structure typedef definition
\**************************************************************************/

typedef volatile  stGpmc_Regs  *pstGpmc_RegsOvly;

/*FUNCTION PROTOTYPES*/
void NOR_Flash_PwrUp(void);
void DC4_Gpmc_init(UNS32 uiChipsel_num);
void DC4_Nor_Reset();
UNS16 DC4_NORdevice_Info();
void DC4_Nor_ChipErase();
void DC4_Nor_BlockErase(UNS32 uiBlock_num);
void DC4_Nor_PageWrite(UNS32 uiBlock_num , UNS32 uiPage_num ,UNS16 *ucBuffer);
void DC4_Nor_PageRead(UNS32 uiBlock_num , UNS32 uiPage_num ,UNS16 *ucBuffer);
void DC4_Nor_Write(UNS32 uiBlock_num , UNS32 uiPage_num ,UNS32 uiOffset,UNS16 *ucBuffer);
UNS16 DC4_Nor_Read(UNS32 uiBlock_num , UNS32 uiPage_num ,UNS32 uiOffset,UNS16 *ucBuffer);
void DC4_Read();

#endif /* GPMC_8148_H_ */
